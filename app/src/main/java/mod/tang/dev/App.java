/*
 * This source file was generated by the Gradle 'init' task
 */
package mod.tang.dev;

public class App {
    public static void main(String[] args) {
        Algorithm algo = new Algorithm();

        String json = """
        {
            "0": [{"to": 1, "weight": 10}, {"to": 2, "weight": 15}],
            "1": [{"to": 3, "weight": 10}],
            "2": [{"to": 4, "weight": 7}],
            "3": [{"to": 4, "weight": 3}],
            "4": [{"to": 5, "weight": 2}],
            "5": [{"to": 6, "weight": 5}],
            "6": [{"to": 7, "weight": 4}],
            "7": [{"to": 8, "weight": 8}],
            "8": [{"to": 9, "weight": 6}],
            "9": [{"to": 0, "weight": 9}],
            "status": {
                "0": 1,
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            }
        }
        """; 

        String xml = """
        <graph>
            <node id="0" status="1">
                <edge to="1" weight="10"/>
                <edge to="2" weight="15"/>
            </node>
            <node id="1" status="1">
                <edge to="3" weight="10"/>
            </node>
            <node id="2" status="0">
                <edge to="4" weight="7"/>
            </node>
            <node id="3" status="1">
                <edge to="4" weight="3"/>
            </node>
            <node id="4" status="0">
                <edge to="5" weight="2"/>
            </node>
            <node id="5" status="1">
                <edge to="6" weight="5"/>
            </node>
            <node id="6" status="1">
                <edge to="7" weight="4"/>
            </node>
            <node id="7" status="0">
                <edge to="8" weight="8"/>
            </node>
            <node id="8" status="0">
                <edge to="9" weight="6"/>
            </node>
            <node id="9" status="1">
                <edge to="0" weight="9"/>
            </node>
        </graph>
        """; 

        Object[] graphDataJson = GraphReader.readJson(json);
        int[][] matrixJson = (int[][]) graphDataJson[0];
        int[] statusJson = (int[]) graphDataJson[1];
        
        Object[] graphDataXml = GraphReader.readXml(xml);
        int[][] matrixXml = (int[][]) graphDataXml[0];
        int[] statusXml = (int[]) graphDataXml[1];
        
        System.out.println("JSON Graph:");
        System.out.println("Adjacency Matrix:");
        printMatrix(matrixJson);
        System.out.println("Node Statuses:");
        printStatuses(statusJson);

        System.out.println("\nXML Graph:");
        System.out.println("Adjacency Matrix:");
        printMatrix(matrixXml);
        System.out.println("Node Statuses:");
        printStatuses(statusXml);

        // Run Dijkstra
        String resultJson = algo.dijkstra(matrixJson, 0, 7);
        String resultXml = algo.dijkstra(matrixXml, 0, 7);

        System.out.println(resultJson);
        PathChecker.checkPath(statusJson, resultJson);  // ตรวจสอบเส้นทาง JSON
        System.out.println(resultXml);
        PathChecker.checkPath(statusXml, resultXml);  // ตรวจสอบเส้นทาง XML
    }

    private static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print((value == Integer.MAX_VALUE ? "-" : value) + "\t");
            }
            System.out.println();
        }
    }

    private static void printStatuses(int[] statuses) {
        for (int i = 0; i < statuses.length; i++) {
            System.out.println("Node " + i + " status: " + statuses[i]);
        }
    }
}